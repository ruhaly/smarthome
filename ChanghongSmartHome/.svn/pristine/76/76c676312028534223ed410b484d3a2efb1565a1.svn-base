package com.changhong.smarthome.phone.foundation.fragment;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.content.Intent;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.changhong.sdk.activity.SuperActivity;
import com.changhong.sdk.baseapi.DownloadUtils;
import com.changhong.sdk.baseapi.HttpUrl;
import com.changhong.sdk.baseapi.StringUtils;
import com.changhong.sdk.entity.BusinessInfo;
import com.changhong.sdk.fragment.SuperFragment;
import com.changhong.smarthome.phone.R;
import com.changhong.smarthome.phone.foundation.activity.BaseActivity;
import com.changhong.smarthome.phone.foundation.baseapi.DbUtils;
import com.changhong.smarthome.phone.foundation.logic.LoginLogic;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;

public class InstalledFragment extends SuperFragment
{
    
    public LoginLogic logic;
    
    public Adapter adapter;
    
    @ViewInject(R.id.listView)
    public ListView listView;
    
    private View convertView;
    
    public List<BusinessInfo> biList = new ArrayList<BusinessInfo>();
    
    //保存最新的列表信息，旧的暂不动，等更新完成后再去更改数据
    public Map<String, BusinessInfo> map = new HashMap<String, BusinessInfo>();
    
    @Override
    public void initData()
    {
        logic = LoginLogic.getInstance();
        biList.clear();
        biList.addAll(DbUtils.queryBusinessInfoList(getActivity().getBaseContext(),
                null,
                null,
                null));
        if (null != biList && biList.size() > 0)
        {
            if (null != logic.user.list && logic.user.list.size() > 0)
            {
                for (int i = 0; i < logic.user.list.size(); i++)
                {
                    for (int j = 0; j < biList.size(); j++)
                    {
                        if (logic.user.list.get(i)
                                .getPackageName()
                                .equals(biList.get(j).getPackageName()))
                        {
                            //保存最新的列表信息，旧的暂不动，等更新完成后再去更改数据
                            map.put(logic.user.list.get(i).getPackageName(),
                                    logic.user.list.get(i));
                        }
                    }
                }
            }
        }
    }
    
    @Override
    public View initLayout(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState)
    {
        convertView = inflater.inflate(R.layout.app_layout, container, false);
        ViewUtils.inject(this, convertView);
        initAdapter();
        return convertView;
    }
    
    public void initAdapter()
    {
        if (null == adapter)
        {
            adapter = new Adapter();
            listView.setAdapter(adapter);
        }
        else
        {
            adapter.notifyDataSetChanged();
        }
    }
    
    @Override
    public void onClick(View v)
    {
        
    }
    
    class Adapter extends BaseAdapter
    {
        
        @Override
        public int getCount()
        {
            return biList.size();
        }
        
        @Override
        public BusinessInfo getItem(int position)
        {
            return biList.get(position);
        }
        
        @Override
        public long getItemId(int position)
        {
            return position;
        }
        
        @Override
        public View getView(int position, View convertView, ViewGroup parent)
        {
            
            ViewHolder holder = null;
            
            if (convertView == null)
            {
                convertView = LayoutInflater.from(getActivity().getBaseContext())
                        .inflate(R.layout.app_item_layout, parent, false);
                holder = new ViewHolder();
                holder.tvName = (TextView) convertView.findViewById(R.id.tvName);
                holder.tvSize = (TextView) convertView.findViewById(R.id.tvSize);
                holder.imgIcon = (ImageView) convertView.findViewById(R.id.imgIcon);
                holder.imgUpdate = (Button) convertView.findViewById(R.id.imgUpdate);
                holder.imgDown = (Button) convertView.findViewById(R.id.imgDown);
                holder.imgUninstall = (Button) convertView.findViewById(R.id.imgUninstall);
                convertView.setTag(holder);
            }
            else
            {
                holder = (ViewHolder) convertView.getTag();
            }
            if (checkIsNeedUpdate(getItem(position).getPackageName(),
                    getItem(position).getVersionNo()))
            {
                holder.imgUpdate.setVisibility(View.VISIBLE);
            }
            else
            {
                holder.imgUpdate.setVisibility(View.GONE);
            }
            holder.imgUpdate.setTag(position);
            holder.imgUpdate.setOnClickListener(new OnClickListener()
            {
                
                @Override
                public void onClick(View v)
                {
                    DownloadUtils.download(getActivity().getBaseContext(),
                            getItem((Integer) v.getTag()),
                            HttpUrl.OSS);
                }
            });
            
            holder.imgUninstall.setTag(position);
            holder.imgUninstall.setVisibility(View.VISIBLE);
            holder.imgUninstall.setOnClickListener(new OnClickListener()
            {
                
                @Override
                public void onClick(View v)
                {
                    ((BaseActivity) getActivity()).unInstall(getItem((Integer) v.getTag()).getPackageName());
                }
            });
            if (!StringUtils.isEmpty(getItem(position).getIcon()))
            {
                
            }
            else
            {
                BitmapDrawable b = (BitmapDrawable) ((SuperActivity) getActivity()).getPackageInfo(getItem(position).getPackageName())
                        .getShorcut();
                if (null != b)
                {
                    holder.imgIcon.setImageBitmap(b.getBitmap());
                }
            }
            holder.tvName.setText(getItem(position).getBusinessName());
            holder.tvSize.setText("大小" + getItem(position).getSize());
            return convertView;
        }
        
        class ViewHolder
        {
            private ImageView imgIcon;
            
            private TextView tvName;
            
            private TextView tvSize;
            
            private Button imgUpdate;
            
            private Button imgDown;
            
            private Button imgUninstall;
        }
    }
    
    /**
     * 
     * 判断是否需要更新
     * [功能详细描述]
     * @param pkgName
     * @param versionName
     * @return
     */
    public boolean checkIsNeedUpdate(String pkgName, String versionName)
    {
        if (map.containsKey(pkgName)
                && !map.get(pkgName).getVersionNo().equals(versionName))
        {
            return true;
        }
        return false;
    }
    
    @Override
    public void updateView(Message msg)
    {
        // TODO Auto-generated method stub
        
    }
    
    @Override
    public void updateView(Intent intent)
    {
        final String pkgName = intent.getStringExtra("pkgName");
        final String action = intent.getStringExtra("action");
        
        initData();
        initAdapter();
    }
}
