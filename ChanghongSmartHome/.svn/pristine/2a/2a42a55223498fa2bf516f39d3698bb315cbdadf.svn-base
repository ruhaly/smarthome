/**
* 
*@Copyright: Copyright (c) 2014  
* @author yang_jun
*@Date:2014-3-27 下午1:46:12 
*@QQ: 756427684 
*/
package com.changhong.smarthome.phone.cinema.view;

import java.util.List;
import java.util.Map;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.PopupWindow;

import com.changhong.smarthome.phone.R;
import com.changhong.smarthome.phone.cinema.adapter.PaymethodAdapter;
import com.changhong.smarthome.phone.cinema.callback.PopupCallback;
import com.changhong.smarthome.phone.cinema.http.HttpAction;

public class PayPopupwindow
{
    private static final String TAG = "PayPopupwindow";
    
    private PopupWindow popupWindow;
    
    private PopupCallback callback;
    
    List<Map<String, Object>> data;
    
    private int contentId;
    
    private Context context;
    
    private View popupWindow_view;
    
    private ListView lv;
    
    public PayPopupwindow(Context con, List<Map<String, Object>> data, int l)
    {
        this.context = con;
        this.data = data;
        this.contentId = l;
    }
    
    /**
     * @param hotCinemaActivity
     */
    
    void initPop()
    {
        
        LayoutInflater layoutInflater = LayoutInflater.from(context);
        popupWindow_view = layoutInflater.inflate(R.layout.pop_layout, null);
        
        lv = (ListView) popupWindow_view.findViewById(R.id.popup_listview);
        PaymethodAdapter adapter = new PaymethodAdapter(context, data);
        lv.setAdapter(adapter);
        popupWindow = new PopupWindow(popupWindow_view, 200,
                LayoutParams.WRAP_CONTENT, true);
        popupWindow_view.setOnTouchListener(new View.OnTouchListener()
        {
            
            @Override
            public boolean onTouch(View v, MotionEvent event)
            {
                // ����Ѿ���������ʾ�ٴε������ʧ
                if (popupWindow != null && popupWindow.isShowing())
                {
                    
                    popupWindow.dismiss();
                    popupWindow = null;
                    Log.d("onTouchPopup", "onTouch");
                }
                
                return false;
            }
        });
        
        popupWindow.setOutsideTouchable(false);
        popupWindow.setFocusable(true);
        
        lv.setOnItemClickListener(new OnItemClickListener()
        {
            
            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id)
            {
                if (callback != null)
                {
                    int id_pay = (Integer) data.get(position)
                            .get(HttpAction.id);
                    String name_pay = (String) data.get(position)
                            .get(HttpAction.strategyName);
                    float money_pay = Float.parseFloat(data.get(position)
                            .get(HttpAction.money)
                            .toString());
                    callback.callback(contentId, id_pay, name_pay, money_pay);
                }
                
                Log.i(TAG, "-------id:" + data.get(position));
            }
        });
    }
    
    /**
     * @param popupCallback 
     * 
     */
    public void show(PopupCallback popupCallback)
    {
        this.callback = popupCallback;
        Log.i(TAG, "------------show popup");
        if (null != popupWindow)
        {
            View parent = popupWindow_view;
            
        }
        else
        {
            initPop();
            View parent = popupWindow_view;
            popupWindow.showAsDropDown(parent);//TODO
            
        }
    }
    
}
